import numpy as np

# 可以用slice来切片，参数类似于range的3个参数，例如：
a0 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
s = slice(0, 2, 1)
print("first 2 rows", a0[s], "\n")

# 也可以用：代替slice切片
print("first 2 rows", a0[0:2:1], "\n")
print("from 1 rows", a0[1:], "\n")

# 可以用...或者空冒号，表示算则的维度与原数组一致
print("first cline", a0[..., 0], "\n")
print("first two cline", a0[:, (0, 1)], "\n")

# 布尔索引
print([a0 > 2])  # 维度不变的数组
print(a0[a0 > 1])  # 一维数组
# 除了数学逻辑外，还有np.iscomplex()、np.isnan()
# #########################################################
# 单个元素
print(a0[0][0], a0[0, 0])
# 多个元素，手动输入若干点的横坐标(第一个数组), 纵坐标(第二个数组)
corner = a0[[0, 0, 2, 2], [0, 2, 0, 2]]
print(corner)

# 行列切片
print("first 2 rows and clines", a0[0:3:2, 0:2], "\n")
# 非连续行列切片,
print("", a0[(0, 2), :][:, (0, 2)], "\n")
# 非连续切片2
a1 = np.arange(1, 10).reshape((3, 3))
print("原数组", a1, "\n")
print("行列非连续切片", a1[np.ix_([1, 2], [0, 2])])

# 小结，所有的切片操作可以归结为 冒号处理，具体而言，包括以下几种情况
# 定位单个/多个元素：       a0[0][0], a0[0, 0] | a0[[0, 0, 2, 2], [0, 2, 0, 2]]
# 定位多行/列  连续元素：a0[0:3:2, 0:2]  # 用range的语法，step为1的时候可以省略
# 定位多行   非连续元素： a0[(0, 2), :][:, (0, 2)]， a1[np.ix_([0, 2], [0, 2])]
# (部分)全量的简写：   a0[:, (0, 1)]
# 元组/单个数字/id_是索引语法，冒号是切片语法
